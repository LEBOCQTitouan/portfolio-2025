import React, { useRef } from "react";

import { useFrame } from "@react-three/fiber";
import { Group, Mesh } from "three";
import { MeshTransmissionMaterial, useGLTF } from "@react-three/drei";
import { useControls } from "leva";

const Planet = () => {
  const meshRef = useRef<Mesh>(null!);

  useFrame(() => {
    meshRef.current.rotation.y++;
  });

  return (
    <mesh ref={meshRef} scale={0.3}>
      <sphereGeometry />
      <meshStandardMaterial />
    </mesh>
  );
};

/* Auto-generated by: https://github.com/pmndrs/gltfjsx */
const Dome = () => {
  const { nodes, materials } = useGLTF("/glass-dome.glb");

  // TODO : need to make it more lightweight (remove leva)
  const materialProps = useControls({
    thickness: { value: 0.2, min: 0, max: 3, step: 0.05 },
    roughness: { value: 0, min: 0, max: 1, step: 0.1 },
    transmission: { value: 1, min: 0, max: 1, step: 0.1 },
    ior: { value: 1.2, min: 0, max: 3, step: 0.1 },
    chromaticAberration: { value: 0.02, min: 0, max: 1 },
    backside: { value: true },
  });

  // TODO : need to remove error on nodes.Dome.geometry
  // TODO : fix problem with shaders in dome (interesting ressource : "https://codesandbox.io/p/sandbox/meshtransmissionmaterial-hmgdjq" & "https://codesandbox.io/p/sandbox/html-markers-forked-pvtzw7")
  return (
    <group dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Dome.geometry}
        material={materials.Material}
      >
        <MeshTransmissionMaterial {...materialProps} />
      </mesh>
    </group>
  );
};

export const Avatar = () => {
  const groupRef = useRef<Group>(null!);

  // useFrame(({ pointer, viewport }) => {
  //   const x = (pointer.x * viewport.width) / 2.5;
  //   const y = (pointer.y * viewport.height) / 2.5;
  //   groupRef.current.lookAt(x, y, 1);
  // });

  return (
    <group ref={groupRef} dispose={null}>
      <Dome />
      <Planet />
    </group>
  );
};
