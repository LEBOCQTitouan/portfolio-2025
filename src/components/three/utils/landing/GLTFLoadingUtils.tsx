/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, {
  useMemo,
  createContext,
  PropsWithChildren,
  useContext,
  useEffect,
  useRef,
} from "react";
import {
  useGLTF,
  Merged,
  PerspectiveCamera,
  useAnimations,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLandingAnimation } from "./LandingStore";

type GLTFResult = GLTF & {
  nodes: {
    coffeMug: THREE.Mesh;
    mouse: THREE.Mesh;
    keyboard: THREE.Mesh;
    lamp: THREE.Mesh;
    computerBase: THREE.Mesh;
    computerScreen: THREE.Mesh;
  };
  materials: {
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.000"]: THREE.MeshStandardMaterial;
  };
};

type ModelContextType = {
  instances: Record<
    string,
    React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
  >;
  materials: GLTFResult["materials"];
  animations: THREE.AnimationClip[];
};

const context = createContext<ModelContextType | null>(null);

// TODO : might need to decouple the scene and the Instances provider for more versatil use
export function Instances(props: PropsWithChildren) {
  const group = useRef<THREE.Group>(null!);

  const { nodes, materials, animations } = useGLTF(
    "/computer.glb",
  ) as GLTFResult;

  const instances = useMemo(
    () => ({
      coffeMug: nodes.coffeMug,
      mouse: nodes.mouse,
      keyboard: nodes.keyboard,
      lamp: nodes.lamp,
      computerBase: nodes.computerBase,
      computerScreen: nodes.computerScreen,
    }),
    [nodes],
  );

  const memoizedMaterials = useMemo<GLTFResult["materials"]>(
    () => materials,
    [materials],
  );

  return (
    <Merged meshes={instances}>
      {(
        instancedMeshes: Record<
          string,
          React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
        >,
      ) => (
        <context.Provider
          value={{
            instances: instancedMeshes,
            materials: memoizedMaterials,
            animations: animations,
          }}
        >
          <group ref={group} {...props} dispose={null}>
            <group name="Scene">{props.children}</group>
          </group>
        </context.Provider>
      )}
    </Merged>
  );
}

// NOTE : wrapper hook for instances maniputlation
export function useInstances(): ModelContextType {
  const instances = useContext(context);
  if (!instances) throw new Error("Instances context not properly initialized");
  return instances;
}

// TODO : move to other file
// NOTE : checked animation using https://gltf-viewer.donmccurdy.com/
export function ScrollCamera() {
  const group = useRef<THREE.Group>(null!);
  const { animations } = useInstances();
  const { percentage } = useLandingAnimation();

  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    if (actions["CameraAction"]) {
      const action = actions["CameraAction"];
      action.paused = true;
      action.time = action.getClip().duration * percentage;
      action.play();
    }
  }, [actions, percentage]);

  return (
    <group
      ref={group}
      name="Camera"
      position={[11.645, 12.782, -11.372]}
      rotation={[-2.36, 0.628, 2.614]}
    >
      <PerspectiveCamera
        name="Camera"
        makeDefault={true}
        far={100}
        near={0.1}
        fov={61.555}
      />
    </group>
  );
}
