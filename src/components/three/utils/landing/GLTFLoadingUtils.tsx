/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, {
  useMemo,
  createContext,
  PropsWithChildren,
  useContext,
} from "react";
import { useGLTF, Merged, PerspectiveCamera } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    coffeMug: THREE.Mesh;
    mouse: THREE.Mesh;
    keyboard: THREE.Mesh;
    lamp: THREE.Mesh;
    computerBase: THREE.Mesh;
    computerScreen: THREE.Mesh;
  };
  materials: {
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.000"]: THREE.MeshStandardMaterial;
  };
};

type ModelContextType = {
  instances: Record<
    string,
    React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
  >;
  materials: GLTFResult["materials"];
};

// type ActionName = "Action";
// export type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const context = createContext<ModelContextType | null>(null);

// TODO : might need to decouple the scene and the Instances provider for more versatil use
export function Instances(props: PropsWithChildren) {
  const { nodes, materials } = useGLTF("/computer.glb") as GLTFResult;
  const instances = useMemo(
    () => ({
      coffeMug: nodes.coffeMug,
      mouse: nodes.mouse,
      keyboard: nodes.keyboard,
      lamp: nodes.lamp,
      computerBase: nodes.computerBase,
      computerScreen: nodes.computerScreen,
    }),
    [nodes],
  );

  const memoizedMaterials = useMemo(() => materials, [materials]);

  return (
    <Merged meshes={instances}>
      {(
        instancedMeshes: Record<
          string,
          React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
        >,
      ) => (
        <context.Provider
          value={{ instances: instancedMeshes, materials: memoizedMaterials }}
        >
          {props.children}
        </context.Provider>
      )}
    </Merged>
  );
}

// NOTE : wrapper hook for instances maniputlation
export function useInstances(): ModelContextType {
  const instances = useContext(context);
  if (!instances) throw new Error("Instances context not properly initialized");
  return instances;
}

// TODO : move to other folder
export function Camera() {
  return (
    <PerspectiveCamera
      name="Camera"
      makeDefault={true}
      far={100}
      near={0.1}
      fov={61.555}
      position={[11.645, 12.782, -11.372]}
      rotation={[-2.36, 0.628, 2.614]}
    />
  );
}
